//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace Micajah.FileService.Client.WebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FileMtomServiceSoap", Namespace="http://www.bigwebapps.com/webservices/filemanager/")]
    public partial class FileMtomService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CopyFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThumbnailOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemporaryFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutFileFromUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTemporaryFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileFromUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileExpirationRequiredOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FileMtomService() {
            this.Url = global::Micajah.FileService.Client.Properties.Settings.Default.WebServiceUrl;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CopyFileCompletedEventHandler CopyFileCompleted;
        
        /// <remarks/>
        public event GetFileInfoCompletedEventHandler GetFileInfoCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event GetThumbnailCompletedEventHandler GetThumbnailCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event GetTemporaryFilesCompletedEventHandler GetTemporaryFilesCompleted;
        
        /// <remarks/>
        public event PutFileCompletedEventHandler PutFileCompleted;
        
        /// <remarks/>
        public event PutFileFromUrlCompletedEventHandler PutFileFromUrlCompleted;
        
        /// <remarks/>
        public event SetTemporaryFileCompletedEventHandler SetTemporaryFileCompleted;
        
        /// <remarks/>
        public event UpdateFileCompletedEventHandler UpdateFileCompleted;
        
        /// <remarks/>
        public event UpdateFileFromUrlCompletedEventHandler UpdateFileFromUrlCompleted;
        
        /// <remarks/>
        public event UpdateFileExpirationRequiredCompletedEventHandler UpdateFileExpirationRequiredCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/CopyFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CopyFile(string applicationGuid, string organizationGuid, string departmentGuid, string fileId, string destinationOrganizationGuid, string destinationDepartmentGuid) {
            object[] results = this.Invoke("CopyFile", new object[] {
                        applicationGuid,
                        organizationGuid,
                        departmentGuid,
                        fileId,
                        destinationOrganizationGuid,
                        destinationDepartmentGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CopyFileAsync(string applicationGuid, string organizationGuid, string departmentGuid, string fileId, string destinationOrganizationGuid, string destinationDepartmentGuid) {
            this.CopyFileAsync(applicationGuid, organizationGuid, departmentGuid, fileId, destinationOrganizationGuid, destinationDepartmentGuid, null);
        }
        
        /// <remarks/>
        public void CopyFileAsync(string applicationGuid, string organizationGuid, string departmentGuid, string fileId, string destinationOrganizationGuid, string destinationDepartmentGuid, object userState) {
            if ((this.CopyFileOperationCompleted == null)) {
                this.CopyFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFileOperationCompleted);
            }
            this.InvokeAsync("CopyFile", new object[] {
                        applicationGuid,
                        organizationGuid,
                        departmentGuid,
                        fileId,
                        destinationOrganizationGuid,
                        destinationDepartmentGuid}, this.CopyFileOperationCompleted, userState);
        }
        
        private void OnCopyFileOperationCompleted(object arg) {
            if ((this.CopyFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFileCompleted(this, new CopyFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/GetFileInfo", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetFileInfo(string fileId, ref string fullFileName, ref long fileSize, ref int width, ref int height, ref int align, ref string fileMimeType) {
            object[] results = this.Invoke("GetFileInfo", new object[] {
                        fileId,
                        fullFileName,
                        fileSize,
                        width,
                        height,
                        align,
                        fileMimeType});
            fullFileName = ((string)(results[1]));
            fileSize = ((long)(results[2]));
            width = ((int)(results[3]));
            height = ((int)(results[4]));
            align = ((int)(results[5]));
            fileMimeType = ((string)(results[6]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string fileId, string fullFileName, long fileSize, int width, int height, int align, string fileMimeType) {
            this.GetFileInfoAsync(fileId, fullFileName, fileSize, width, height, align, fileMimeType, null);
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string fileId, string fullFileName, long fileSize, int width, int height, int align, string fileMimeType, object userState) {
            if ((this.GetFileInfoOperationCompleted == null)) {
                this.GetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileInfo", new object[] {
                        fileId,
                        fullFileName,
                        fileSize,
                        width,
                        height,
                        align,
                        fileMimeType}, this.GetFileInfoOperationCompleted, userState);
        }
        
        private void OnGetFileInfoOperationCompleted(object arg) {
            if ((this.GetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/GetFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getFileResponse", IsNullable=true)]
        public GetFileResponse GetFile(string fileId) {
            object[] results = this.Invoke("GetFile", new object[] {
                        fileId});
            return ((GetFileResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string fileId) {
            this.GetFileAsync(fileId, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string fileId, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        fileId}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/GetThumbnail", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getFileResponse", IsNullable=true)]
        public GetFileResponse GetThumbnail(string fileId, int width, int height, int align, ref string result) {
            object[] results = this.Invoke("GetThumbnail", new object[] {
                        fileId,
                        width,
                        height,
                        align,
                        result});
            result = ((string)(results[1]));
            return ((GetFileResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetThumbnailAsync(string fileId, int width, int height, int align, string result) {
            this.GetThumbnailAsync(fileId, width, height, align, result, null);
        }
        
        /// <remarks/>
        public void GetThumbnailAsync(string fileId, int width, int height, int align, string result, object userState) {
            if ((this.GetThumbnailOperationCompleted == null)) {
                this.GetThumbnailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThumbnailOperationCompleted);
            }
            this.InvokeAsync("GetThumbnail", new object[] {
                        fileId,
                        width,
                        height,
                        align,
                        result}, this.GetThumbnailOperationCompleted, userState);
        }
        
        private void OnGetThumbnailOperationCompleted(object arg) {
            if ((this.GetThumbnailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThumbnailCompleted(this, new GetThumbnailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/DeleteFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFile(string fileId) {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        fileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileId) {
            this.DeleteFileAsync(fileId, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileId, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        fileId}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/GetTemporaryFiles", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemporaryFiles(string fileGuid) {
            object[] results = this.Invoke("GetTemporaryFiles", new object[] {
                        fileGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemporaryFilesAsync(string fileGuid) {
            this.GetTemporaryFilesAsync(fileGuid, null);
        }
        
        /// <remarks/>
        public void GetTemporaryFilesAsync(string fileGuid, object userState) {
            if ((this.GetTemporaryFilesOperationCompleted == null)) {
                this.GetTemporaryFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemporaryFilesOperationCompleted);
            }
            this.InvokeAsync("GetTemporaryFiles", new object[] {
                        fileGuid}, this.GetTemporaryFilesOperationCompleted, userState);
        }
        
        private void OnGetTemporaryFilesOperationCompleted(object arg) {
            if ((this.GetTemporaryFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemporaryFilesCompleted(this, new GetTemporaryFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/PutFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PutFile(string applicationGuid, string organizationName, ref string organizationGuid, string departmentName, ref string departmentGuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] GetFileRequestStreaming getFileResponseStreaming) {
            object[] results = this.Invoke("PutFile", new object[] {
                        applicationGuid,
                        organizationName,
                        organizationGuid,
                        departmentName,
                        departmentGuid,
                        getFileResponseStreaming});
            organizationGuid = ((string)(results[1]));
            departmentGuid = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PutFileAsync(string applicationGuid, string organizationName, string organizationGuid, string departmentName, string departmentGuid, GetFileRequestStreaming getFileResponseStreaming) {
            this.PutFileAsync(applicationGuid, organizationName, organizationGuid, departmentName, departmentGuid, getFileResponseStreaming, null);
        }
        
        /// <remarks/>
        public void PutFileAsync(string applicationGuid, string organizationName, string organizationGuid, string departmentName, string departmentGuid, GetFileRequestStreaming getFileResponseStreaming, object userState) {
            if ((this.PutFileOperationCompleted == null)) {
                this.PutFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileOperationCompleted);
            }
            this.InvokeAsync("PutFile", new object[] {
                        applicationGuid,
                        organizationName,
                        organizationGuid,
                        departmentName,
                        departmentGuid,
                        getFileResponseStreaming}, this.PutFileOperationCompleted, userState);
        }
        
        private void OnPutFileOperationCompleted(object arg) {
            if ((this.PutFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutFileCompleted(this, new PutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/PutFileFromUrl", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PutFileFromUrl(string applicationGuid, string organizationName, ref string organizationGuid, string departmentName, ref string departmentGuid, string fileUrl) {
            object[] results = this.Invoke("PutFileFromUrl", new object[] {
                        applicationGuid,
                        organizationName,
                        organizationGuid,
                        departmentName,
                        departmentGuid,
                        fileUrl});
            organizationGuid = ((string)(results[1]));
            departmentGuid = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PutFileFromUrlAsync(string applicationGuid, string organizationName, string organizationGuid, string departmentName, string departmentGuid, string fileUrl) {
            this.PutFileFromUrlAsync(applicationGuid, organizationName, organizationGuid, departmentName, departmentGuid, fileUrl, null);
        }
        
        /// <remarks/>
        public void PutFileFromUrlAsync(string applicationGuid, string organizationName, string organizationGuid, string departmentName, string departmentGuid, string fileUrl, object userState) {
            if ((this.PutFileFromUrlOperationCompleted == null)) {
                this.PutFileFromUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileFromUrlOperationCompleted);
            }
            this.InvokeAsync("PutFileFromUrl", new object[] {
                        applicationGuid,
                        organizationName,
                        organizationGuid,
                        departmentName,
                        departmentGuid,
                        fileUrl}, this.PutFileFromUrlOperationCompleted, userState);
        }
        
        private void OnPutFileFromUrlOperationCompleted(object arg) {
            if ((this.PutFileFromUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutFileFromUrlCompleted(this, new PutFileFromUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/SetTemporaryFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetTemporaryFile(string fileId, string fileGuid) {
            object[] results = this.Invoke("SetTemporaryFile", new object[] {
                        fileId,
                        fileGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetTemporaryFileAsync(string fileId, string fileGuid) {
            this.SetTemporaryFileAsync(fileId, fileGuid, null);
        }
        
        /// <remarks/>
        public void SetTemporaryFileAsync(string fileId, string fileGuid, object userState) {
            if ((this.SetTemporaryFileOperationCompleted == null)) {
                this.SetTemporaryFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTemporaryFileOperationCompleted);
            }
            this.InvokeAsync("SetTemporaryFile", new object[] {
                        fileId,
                        fileGuid}, this.SetTemporaryFileOperationCompleted, userState);
        }
        
        private void OnSetTemporaryFileOperationCompleted(object arg) {
            if ((this.SetTemporaryFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTemporaryFileCompleted(this, new SetTemporaryFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/UpdateFile", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFile(string fileId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] GetFileRequestStreaming getFileResponseStreaming) {
            object[] results = this.Invoke("UpdateFile", new object[] {
                        fileId,
                        getFileResponseStreaming});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string fileId, GetFileRequestStreaming getFileResponseStreaming) {
            this.UpdateFileAsync(fileId, getFileResponseStreaming, null);
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string fileId, GetFileRequestStreaming getFileResponseStreaming, object userState) {
            if ((this.UpdateFileOperationCompleted == null)) {
                this.UpdateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileOperationCompleted);
            }
            this.InvokeAsync("UpdateFile", new object[] {
                        fileId,
                        getFileResponseStreaming}, this.UpdateFileOperationCompleted, userState);
        }
        
        private void OnUpdateFileOperationCompleted(object arg) {
            if ((this.UpdateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileCompleted(this, new UpdateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/UpdateFileFromUrl", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFileFromUrl(string fileId, string fileUrl) {
            object[] results = this.Invoke("UpdateFileFromUrl", new object[] {
                        fileId,
                        fileUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileFromUrlAsync(string fileId, string fileUrl) {
            this.UpdateFileFromUrlAsync(fileId, fileUrl, null);
        }
        
        /// <remarks/>
        public void UpdateFileFromUrlAsync(string fileId, string fileUrl, object userState) {
            if ((this.UpdateFileFromUrlOperationCompleted == null)) {
                this.UpdateFileFromUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileFromUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateFileFromUrl", new object[] {
                        fileId,
                        fileUrl}, this.UpdateFileFromUrlOperationCompleted, userState);
        }
        
        private void OnUpdateFileFromUrlOperationCompleted(object arg) {
            if ((this.UpdateFileFromUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileFromUrlCompleted(this, new UpdateFileFromUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bigwebapps.com/webservices/filemanager/UpdateFileExpirationRequired", RequestNamespace="http://www.bigwebapps.com/webservices/filemanager/", ResponseNamespace="http://www.bigwebapps.com/webservices/filemanager/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFileExpirationRequired(string fileId, bool expirationRequired) {
            object[] results = this.Invoke("UpdateFileExpirationRequired", new object[] {
                        fileId,
                        expirationRequired});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileExpirationRequiredAsync(string fileId, bool expirationRequired) {
            this.UpdateFileExpirationRequiredAsync(fileId, expirationRequired, null);
        }
        
        /// <remarks/>
        public void UpdateFileExpirationRequiredAsync(string fileId, bool expirationRequired, object userState) {
            if ((this.UpdateFileExpirationRequiredOperationCompleted == null)) {
                this.UpdateFileExpirationRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileExpirationRequiredOperationCompleted);
            }
            this.InvokeAsync("UpdateFileExpirationRequired", new object[] {
                        fileId,
                        expirationRequired}, this.UpdateFileExpirationRequiredOperationCompleted, userState);
        }
        
        private void OnUpdateFileExpirationRequiredOperationCompleted(object arg) {
            if ((this.UpdateFileExpirationRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileExpirationRequiredCompleted(this, new UpdateFileExpirationRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bigwebapps.com/webservices/filemanager/")]
    public partial class GetFileResponse {
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bigwebapps.com/webservices/filemanager/")]
    public partial class GetFileRequestStreaming {
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CopyFileCompletedEventHandler(object sender, CopyFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileInfoCompletedEventHandler(object sender, GetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string fullFileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int width {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int height {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int align {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string fileMimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetFileResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetFileResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetThumbnailCompletedEventHandler(object sender, GetThumbnailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThumbnailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThumbnailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetFileResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetFileResponse)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTemporaryFilesCompletedEventHandler(object sender, GetTemporaryFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemporaryFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemporaryFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PutFileCompletedEventHandler(object sender, PutFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string organizationGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string departmentGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PutFileFromUrlCompletedEventHandler(object sender, PutFileFromUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutFileFromUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutFileFromUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string organizationGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string departmentGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetTemporaryFileCompletedEventHandler(object sender, SetTemporaryFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTemporaryFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTemporaryFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateFileCompletedEventHandler(object sender, UpdateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateFileFromUrlCompletedEventHandler(object sender, UpdateFileFromUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileFromUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileFromUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateFileExpirationRequiredCompletedEventHandler(object sender, UpdateFileExpirationRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileExpirationRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileExpirationRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591